// Copyright 2022 Lightbend Inc.

// All extension points for Kalix

syntax = "proto3";

package kalix;

import "google/protobuf/descriptor.proto";
import "kalix/acl.proto";
import "kalix/component.proto";
import "kalix/eventing.proto";
import "kalix/jwt.proto";
import "kalix/keygenerator.proto";
import "kalix/views.proto";

option go_package = "github.com/lightbend/kalix-go-sdk/kalix;kalix";
option java_multiple_files = true;
option java_package = "kalix";

message FieldOptions {
  // Extension for specifying which field in a message is to be considered an
  // entity key, for the purposes of associating gRPC calls with entities and
  // sharding.
  bool entity_key = 1;
  // JWT claim and token configuration.
  JwtFieldOptions jwt = 2;
  // Extension for specifying which field in a message is to be considered an
  // workflow key, for the purposes of associating gRPC calls with workflows.
  bool workflow_key = 3;
}

message FileOptions {
  // Event sourced entity configuration.
  EventSourcedEntity event_sourced_entity = 1;
  // Value entity configuration.
  ValueEntity value_entity = 2;
  // Replicated entity configuration.
  ReplicatedEntity replicated_entity = 3;
  // ACL options
  Acl acl = 4;
}

message MessageOptions {
  // JWT validation and signing configuration.
  JwtMessageOptions jwt = 1;
}

message MethodOptions {
  // Eventing configuration for a gRPC method.
  Eventing eventing = 1;
  // Views configuration for a gRPC method.
  View view = 2;
  // JWT validation and signing configuration.
  JwtMethodOptions jwt = 3;
  // Entity options
  KeyGeneratorMethodOptions entity = 4;
  // ACL options
  Acl acl = 5;
  // Workflow options
  KeyGeneratorMethodOptions workflow = 6;
}

message ServiceOptions {
  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0; // Will be ignored for processing - same as omitting the service type
    SERVICE_TYPE_ACTION = 1;
    SERVICE_TYPE_ENTITY = 2;
    SERVICE_TYPE_VIEW = 3;
  }
  // This field is mandatory
  ServiceType type = 1;
  // A path to a component - required for SERVICE_TYPE_ENTITY types
  string component = 2;
  // ACL options
  Acl acl = 3;
  ServiceEventing eventing = 4;
}

message CodegenOptions {
  oneof codegen {
    EventSourcedEntityDef event_sourced_entity = 1;
    ValueEntityDef value_entity = 2;
    ReplicatedEntityDef replicated_entity = 3;
    ActionDef action = 4;
    ViewDef view = 5;
    WorkflowDef workflow = 6;
  }
}

extend google.protobuf.FieldOptions {
  FieldOptions field = 1080;
}

extend google.protobuf.FileOptions {
  FileOptions file = 1080;
}

extend google.protobuf.MethodOptions {
  MethodOptions method = 1080;
}

extend google.protobuf.MessageOptions {
  MessageOptions message = 1080;
}

extend google.protobuf.ServiceOptions {
  ServiceOptions service = 1080;
  CodegenOptions codegen = 1081;
}
